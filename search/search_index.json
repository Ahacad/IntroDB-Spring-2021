{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"COURSE INFORMATION COMP130010h.01: Introduction to Database College of Computer Science and Technology, Fudan University Meeting Time: Tuesday 11-13 / Friday 8-9 Lecture Location: HGX 201 / H Computing Centre 3# { Room 2 } Room 3 Final: Wed/2021-06-30 13:00-15:00 Overview Course Objective This course is designed to introduce the database system and help students to become proficient in its application. Topics include: Data models (relational, document, key/value) Storage models (n-ary, decomposition) Query languages (SQL, stored procedures) Storage architectures (heaps, log-structured) Indexing (order preserving trees, hash tables) Transaction processing (ACID, concurrency control) Recovery (logging, checkpoints) Query processing (joins, sorting, aggregation, optimization) Parallel architectures (multi-core, distributed) Homeworks There will be roughly weekly homework. These will generally consist of a number of written problems. Since there are also laboratory classes, these homework will not involve any programming. Important You are welcome to discuss these problems with other students, but this should be limited to discussions of high-level strategies and concepts. The actual write-up of the solutions must be your own. Homeworks needs to be submitted in class Every Tuesday . They can either be handwritten or typed (LATEX is recommended) and print. However, your work must be clear and legible to receive credit. Written solutions will not be posted, but the homework problems may be reviewed in Q&A recitations . Assignments In the first few weeks, there are several simple assignments to help students understand the practicalities of database operation, which are very easy since we will provide detailed instructions. We will post each assignment here in Friday's class , and students are required to complete the work and have it checked by TAs in class . Assignment-1 Assignment-2 Projects In this course, students will be required to complete two course projects . Project-1 will be posted after the completion of the first few weeks of assignments and project-2 will be assigned after project-1 . Students will have plenty of time to complete both projects, which will not be too difficult and will focus more on the understanding and application of databases. Project-1 Project-2 Textbook \u6570\u636e\u5e93\u7cfb\u7edf\u6559\u7a0b(\u7b2c3\u7248)\u65bd\u4f2f\u4e50\uff0c\u4e01\u5b9d\u5eb7\uff0c\u6c6a\u536b \u8457 \u9ad8\u7b49\u6559\u80b2\u51fa\u7248\u793e \u672c\u79d1\u7814\u7a76\u751f\u6559\u6750 \u9ad8\u7b49\u6559\u80b2\u51fa\u7248\u793e Database Management Systems, 3rd Edition. By Raghu Ramakrishnan, Jhannes Gehrke TAs Xuanjie Fang Software Engineering, College of Computer Science and Technology Email: 20212010015@fudan.edu.cn location: J-Cross-science-2 E4006-02 Jie Shi Software Engineering, College of Computer Science and Technology Email: 20212010016@fudan.edu.cn location: J-Cross-science-2 E4006-03 Exams Final: Wed/2021-06-30 13:00-15:00 Closed book Grading Grades will be weighted as follows: Items Weight Midterm Exams 25% Final Exams 40% Assignments/Projects 35% If you have questions about the grading schema, please email us for contaction.","title":"HomePage"},{"location":"#course-information","text":"COMP130010h.01: Introduction to Database College of Computer Science and Technology, Fudan University Meeting Time: Tuesday 11-13 / Friday 8-9 Lecture Location: HGX 201 / H Computing Centre 3# { Room 2 } Room 3 Final: Wed/2021-06-30 13:00-15:00","title":"COURSE INFORMATION"},{"location":"#overview","text":"Course Objective This course is designed to introduce the database system and help students to become proficient in its application. Topics include: Data models (relational, document, key/value) Storage models (n-ary, decomposition) Query languages (SQL, stored procedures) Storage architectures (heaps, log-structured) Indexing (order preserving trees, hash tables) Transaction processing (ACID, concurrency control) Recovery (logging, checkpoints) Query processing (joins, sorting, aggregation, optimization) Parallel architectures (multi-core, distributed)","title":"Overview"},{"location":"#homeworks","text":"There will be roughly weekly homework. These will generally consist of a number of written problems. Since there are also laboratory classes, these homework will not involve any programming. Important You are welcome to discuss these problems with other students, but this should be limited to discussions of high-level strategies and concepts. The actual write-up of the solutions must be your own. Homeworks needs to be submitted in class Every Tuesday . They can either be handwritten or typed (LATEX is recommended) and print. However, your work must be clear and legible to receive credit. Written solutions will not be posted, but the homework problems may be reviewed in Q&A recitations .","title":"Homeworks"},{"location":"#assignments","text":"In the first few weeks, there are several simple assignments to help students understand the practicalities of database operation, which are very easy since we will provide detailed instructions. We will post each assignment here in Friday's class , and students are required to complete the work and have it checked by TAs in class . Assignment-1 Assignment-2","title":"Assignments"},{"location":"#projects","text":"In this course, students will be required to complete two course projects . Project-1 will be posted after the completion of the first few weeks of assignments and project-2 will be assigned after project-1 . Students will have plenty of time to complete both projects, which will not be too difficult and will focus more on the understanding and application of databases. Project-1 Project-2","title":"Projects"},{"location":"#textbook","text":"\u6570\u636e\u5e93\u7cfb\u7edf\u6559\u7a0b(\u7b2c3\u7248)\u65bd\u4f2f\u4e50\uff0c\u4e01\u5b9d\u5eb7\uff0c\u6c6a\u536b \u8457 \u9ad8\u7b49\u6559\u80b2\u51fa\u7248\u793e \u672c\u79d1\u7814\u7a76\u751f\u6559\u6750 \u9ad8\u7b49\u6559\u80b2\u51fa\u7248\u793e Database Management Systems, 3rd Edition. By Raghu Ramakrishnan, Jhannes Gehrke","title":"Textbook"},{"location":"#tas","text":"Xuanjie Fang Software Engineering, College of Computer Science and Technology Email: 20212010015@fudan.edu.cn location: J-Cross-science-2 E4006-02 Jie Shi Software Engineering, College of Computer Science and Technology Email: 20212010016@fudan.edu.cn location: J-Cross-science-2 E4006-03","title":"TAs"},{"location":"#exams","text":"Final: Wed/2021-06-30 13:00-15:00 Closed book","title":"Exams"},{"location":"#grading","text":"Grades will be weighted as follows: Items Weight Midterm Exams 25% Final Exams 40% Assignments/Projects 35% If you have questions about the grading schema, please email us for contaction.","title":"Grading"},{"location":"Answer/assignment-2/","text":"Assignment-2 Answer Q1 \u67e5\u8be2\u4e0a\u6620\u65f6\u95f4 >= 2014\u5e74\u5e76\u4e14\u8bc4\u5206<=7.0\u7684\u7535\u5f71\uff0c \u8f93\u51fa:\u7535\u5f71\u6807\u9898\uff0c\u5bfc\u6f14\u59d3\u540d\uff0c\u8bc4\u5206( rating ) use movies ; select m . title , p . name , m . rating from movie m , person p where m . year >= 2014 and m . rating <= 7 . 0 and m . director = p . id count=348 Q2 \u67e5\u8be2\u8fd9\u6837\u7684\u5bfc\u6f14\u59d3\u540d\uff08\u5728 movie . director \u4e2d\u6709\u8bb0\u5f55\u7684\u5373\u5bfc\u6f14\uff09\uff0c\u8fd9\u4e9b\u5bfc\u6f14\u6ca1\u6709\u5728\u4efb\u4f55\u4e00\u90e8\u7535\u5f71\u4e2d\u62c5\u4efb\u6f14\u5458\u3002 \u8f93\u51fa\uff1a\u5bfc\u6f14\u59d3\u540d use movies ; select p . ` name ` from ` person ` as p where p . ` id ` in ( select ` director ` from ` movie ` ) and p . ` id ` not in ( select ` actor_id ` from ` movie_actor ` ); count=608 Q3 \u67e5\u8be2 Edward Norton \u6216\u8005 Aamir Khan \u53c2\u6f14\u8fc7\u7684\u6240\u6709\u7535\u5f71 \u8f93\u51fa: \u7535\u5f71\u6807\u9898,\u8be5\u7535\u5f71\u7684\u4e0a\u6620\u65f6\u95f4 use movies ; select m . title , m . year from movie m , movie_actor ma , person p where m . id = ma . movie_id and ( p . name = 'Edward Norton' or p . name = 'Aamir Khan' ) and p . id = ma . actor_id ; count=9 Q4 \u67e5\u8be2\u7c7b\u578b\u4e3a Action \u4e14 \u8bc4\u5206>8.0 \u7684\u7535\u5f71\uff0c\u5e76\u4e14\u8be5\u7535\u5f71\u7684\u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71>=2\u90e8 \u8f93\u51fa:\u7535\u5f71\u6807\u9898,\u5bfc\u6f14\u59d3\u540d,\u8bc4\u5206 use movies ; select m . title , m . rating , p . name from movie_genre mg , movie m , genre g , person p where m . id = mg . movie_id and g . id = mg . genre_id and g . name = 'Action' and m . rating > 8 . 0 and p . id = m . director and m . director in ( select director from movie group by director having count ( * ) >= 2 ) count=11 ps: \u60f3\u4e0d\u6e05\u695a\u7684\u65f6\u5019\uff0c\u5148\u5168\u90e8\u8fde\u63a5\u83b7\u5f97\u6240\u6709\u9700\u8981\u7684\u5b57\u6bb5 where m.id=mg.movie_id and g.id = mg.genre_id and g.name='Action' and p.id = m.director \uff0c \u7136\u540e\u8003\u8651\u7528\u805a\u5408\u6765\u83b7\u5f97 >= 2 \u7684\u95ee\u9898\u3002 Q5 \u67e5\u8be2\u7535\u5f71\uff0c\u8be5\u7535\u5f71\u81f3\u5c11\u5305\u542b Horror \uff0c Thriller \u8fd92\u79cd\u7c7b\u578b \u8f93\u51fa\uff1a\u7535\u5f71\u540d\u79f0\uff0c\u5bfc\u6f14\u540d\u79f0 select m . ` title ` , p . ` name ` from ` movie ` as m , ` person ` as p where m . ` director ` = p . ` id ` and exists ( select * from ` movie_genre ` as X1 , ` genre ` as X2 , ` movie_genre ` as Y1 , ` genre ` as Y2 where X1 . ` genre_id ` = X2 . ` id ` and X2 . ` name ` = 'Horror' and Y1 . ` genre_id ` = Y2 . ` id ` and Y2 . ` name ` = 'Thriller' and X1 . ` movie_id ` = Y1 . ` movie_id ` and X1 . ` movie_id ` = m . ` id ` ); count=44 \u7b54\u6848\u7684\u601d\u8def\u662f\u5bf9\u6574\u4e2a\u7535\u5f71\u6761\u76ee\u8fdb\u884c exist \u5224\u65ad\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7535\u5f71\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u7c7b\u578b\u7b26\u5408\u9898\u76ee\u6761\u4ef6\u3002 \u4e5f\u53ef\u4ee5\u7528\u4e24\u4e2a in \uff0c m.id \u5728 movie_genre \u4e2d\u6709\u5bf9\u5e94 Horror \u4e5f\u6709\u5bf9\u5e94\u7684 Thriller Q6 \u67e5\u8be2\u7535\u5f71\uff0c\u8be5\u7535\u5f71\u4ec5\u4ec5\u5305\u542b Horror \uff0c Thriller \u8fd92\u79cd\u7c7b\u578b \u8f93\u51fa\uff1a\u7535\u5f71\u540d\u79f0\uff0c\u5bfc\u6f14\u540d\u79f0 select m . ` title ` , p . ` name ` from ` movie ` as m , ` person ` as p where m . ` director ` = p . ` id ` and exists ( select * from ` movie_genre ` as X1 , ` genre ` as X2 , ` movie_genre ` as Y1 , ` genre ` as Y2 where X1 . ` genre_id ` = X2 . ` id ` and X2 . ` name ` = 'Horror' and Y1 . ` genre_id ` = Y2 . ` id ` and Y2 . ` name ` = 'Thriller' and X1 . ` movie_id ` = Y1 . ` movie_id ` and X1 . ` movie_id ` = m . ` id ` ) and not exists ( select * from ` movie_genre ` as X1 , ` genre ` as X2 , ` movie_genre ` as Y1 , ` genre ` as Y2 where X1 . ` genre_id ` = X2 . ` id ` and X2 . ` name ` != 'Horror' and X2 . ` name ` != 'Thriller' and Y1 . ` genre_id ` = Y2 . ` id ` and Y2 . ` name ` != 'Horror' and Y2 . ` name ` != 'Thriller' and X1 . ` movie_id ` = Y1 . ` movie_id ` and X1 . ` movie_id ` = m . ` id ` ); count=16 \u6709 Horror \u6216\u8005 Thriller , \u4f46\u4e0d\u540c\u65f6\u6709\u4e24\u4e2a \uff08\u770b\u7740\u957f\uff0c\u4f46\u662f\u4e5f\u5c31\u662f\u5199\u5f97\u957f\u4e86\u70b9\uff0c\u601d\u8def\u4e0d\u96be\uff09 Q7 \u67e5\u8be2\u57282014\u5e74\u4e4b\u524d\uff08\u5305\u62ec2014\uff09\uff0c\u6709\u8d85\u8fc73\u90e8\u7535\u5f71\u4e0a\u6620\u7684\u6f14\u5458\u4ee5\u53ca\u4ed6\u53c2\u6f14\u7684\u7535\u5f71\u540d \u8f93\u51fa: \u6f14\u5458\u540d\uff0c\u53c2\u6f14\u7684\u7535\u5f71\u540d\uff0c use movies ; select m . title , p . name from movie m , person p , movie_actor ma1 where m . id = ma1 . movie_id and p . id = ma1 . actor_id and m . year <= 2014 and ma1 . actor_id in ( select mg . actor_id from movie_actor mg , movie mm where mm . id = mg . movie_id and mm . year <= 2014 group by actor_id having count ( * ) > 3 ); count=848 \u6ce8\u610f\u70b9\uff1a\u8fd9\u9053\u9898\u5f88\u6709\u53ef\u80fd\u4f1a\u5728\u805a\u5408\u7684\u5730\u65b9\u4e0d\u589e\u52a02014\u5e74\u9650\u5236\uff0c\u4ece\u800c\u5bfc\u81f4\u7b54\u6848\u8d85\u8fc71000 Q8 \u67e5\u8be2\u6f14\u5458\uff0c\u8be5\u6f14\u5458\u53c2\u6f14\u4e86 Joss Whedon \u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71\u3002 \u8f93\u51fa\uff1a\u6f14\u5458\u59d3\u540d select p . ` name ` from ` person ` as p where p . ` id ` in ( select ` actor_id ` from ` movie_actor ` ) and not exists ( select * from ` person ` as pp , ` movie ` as mm where pp . ` name ` = 'Joss Whedon' and mm . ` director ` = pp . ` id ` and not exists ( select * from ` movie_actor ` as ma where mm . ` id ` = ma . ` movie_id ` and ma . ` actor_id ` = p . ` id ` ) ); count=2 Q9 \u67e5\u8be2\u8fd9\u6837\u7684\u6f14\u5458\u4e0e\u5bfc\u6f14\uff0c\u8fd9\u4e2a\u6f14\u5458\u53c2\u6f14\u4e86\u8be5\u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71\uff0c\u4e14\u8be5\u5bfc\u6f14\u5bfc\u6f14\u4e86\u81f3\u5c112\u90e8\u7535\u5f71\u3002 \u8f93\u51fa\uff1a \u6f14\u5458\u59d3\u540d\uff0c\u5bfc\u6f14\u59d3\u540d select p . ` name ` , d . ` name ` from ` person ` as p , ` person ` as d where p . ` id ` in ( select ` actor_id ` from ` movie_actor ` ) and d . ` id ` in ( select X . ` director ` from ` movie ` as X , ` movie ` as Y where X . ` director ` = Y . ` director ` and X . ` id ` != Y . ` id ` ) and not exists ( select * from ` movie ` as m where m . ` director ` = d . ` id ` and not exists ( select * from ` movie_actor ` as ma where m . ` id ` = ma . ` movie_id ` and ma . ` actor_id ` = p . ` id ` ) ); count=50 Q10 * Additional Question \u67e5\u8be2\u6bcf\u4e00\u79cd\u7c7b\u578b\u7535\u5f71\u5bf9\u5e94\u7684\u5f71\u5e1d/\u5f71\u540e\uff08\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u7c7b\u578b\uff0c\u8be5\u5f71\u5e1d/\u5f71\u540e\u81f3\u5c11\u6709\u4e09\u90e8\u7535\u5f71\u662f\u8fd9\u4e2a\u7c7b\u578b\uff0c\u5e76\u4e14\u5728\u6240\u6709\u81f3\u5c11\u53c2\u6f14\u4e863\u90e8\u8be5\u7c7b\u578b\u7535\u5f71\u7684\u6f14\u5458\u4e2d\uff0c\u83b7\u5f97\u7684\u5e73\u5747\u8bc4\u5206\u6700\u9ad8\uff09 \u8f93\u51fa\uff1a \u7c7b\u578b\uff0c\u6f14\u5458\u540d\uff0c\u5e73\u5747\u8bc4\u5206 \u8fd9\u9053\u9898\u6700\u7b80\u5355\u7684\u601d\u8def\u662f\uff1a \u5148\u628a\u6240\u6709\u7684\u8868\u8fde\u63a5\u8d77\u6765\uff08\u56e0\u4e3a\u6240\u9700\u7684\u5b57\u6bb5\u5206\u6563\u5728\u4e0d\u540c\u7684\u8868\u4e2d\uff09 \u5bf9 \uff08\u6f14\u5458\uff0c\u7c7b\u578b\uff09\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u505a \u805a\u5408\u5206\u7ec4 \uff0c\u5e76\u6309\u7167\u8fd9\u4e2a\u5206\u7ec4\u6c42\u51fa \u6bcf\u4e2a\u6f14\u5458\u5728\u6bcf\u4e2a\u7c7b\u578b\u4e0a\u7684\u6240\u6709\u7535\u5f71\u7684\u5e73\u5747\u5206\uff0c\u5e76\u5728\u805a\u5408\u4e2d\u589e\u52a0 count \u7b5b\u9009\u51fa\u8be5\u7c7b\u578b\u5bf9\u4e8e\u8be5\u6f14\u5458\u7535\u5f71\u6570\u5fc5\u987b>=3 \u7136\u540e\u5bf9\u7c7b\u578b\u5206\u7ec4\uff0c\u6c42\u51fa\u6700\u5927\u7684\u5e73\u5747\u5206 Ps: \u5f53\u6d89\u53ca\u5230\u5d4c\u5957\u5b50\u53e5\u6bd4\u8f83\u957f\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528 with \u6765\u4f18\u5316(\u5b9a\u4e49\u5b50\u53e5\u522b\u540d) with whole as ( select g . name as genre , p . name as actor , avg ( m . rating ) as avg_rating from genre g , movie m , movie_actor ma , movie_genre mg , person p where g . id = mg . genre_id and m . id = mg . movie_id and p . id = ma . actor_id and m . id = ma . movie_id group by genre , actor having count ( rating ) >= 3 ) \u8fd9\u4e2a whole \u5185\u90e8\u5b50\u53e5\u5b9e\u73b0\u7684\u5c31\u662f\u6b65\u9aa4\u7684\u524d\u4e24\u6b65\uff0c\u5f97\u5230\u4e86\uff08\u6f14\u5458\uff0c\u7c7b\u578b\uff09\u5bf9\u5e94\u7684\u5e73\u5747\u5f97\u5206 use movies ; with whole as ( select g . name as genre , p . name as actor , avg ( m . rating ) as avg_rating from genre g , movie m , movie_actor ma , movie_genre mg , person p where g . id = mg . genre_id and m . id = mg . movie_id and p . id = ma . actor_id and m . id = ma . movie_id group by genre , actor having count ( rating ) >= 3 ) select w . genre as genre , max ( w . avg_rating ) as max_rating from whole w group by genre \u5230\u4e86\u8fd9\u4e00\u6b65\u5c31\u6c42\u51fa\u4e86\u4e0a\u4e00\u6b65\u4e2d\uff0c\u6bcf\u4e2a\u7c7b\u578b\u5bf9\u5e94\u7684\u6700\u5927\u5e73\u5747\u5206 \u6700\u540e\u6c42\u51fa\u6700\u5927\u7684\u6761\u76ee use movies ; with whole as ( select g . name as genre , p . name as actor , avg ( m . rating ) as avg_rating from genre g , movie m , movie_actor ma , movie_genre mg , person p where g . id = mg . genre_id and m . id = mg . movie_id and p . id = ma . actor_id and m . id = ma . movie_id group by genre , actor having count ( rating ) >= 3 ), max_genre as ( select w . genre as genre , max ( w . avg_rating ) as max_rating from whole w group by genre ) select ww . actor as actor , ww . genre as genre , ww . avg_rating as rating from whole ww , max_genre as mg where ww . genre = mg . genre and ww . avg_rating >= mg . max_rating ; \u6ce8\u610f\uff0c\u4e00\u4e2a\u7c7b\u578b\u7684\u5f71\u5e1d/\u5f71\u540e\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\uff08\u5e73\u5747\u5206\u76f8\u540c\uff09 count=17 lujiayi\u540c\u5b66\u7684\u53e6\u4e00\u79cd\u5199\u6cd5\u66f4\u7b80\u6d01\u548c\u6613\u4e8e\u7406\u89e3 select g . name as genre , p . name , avg ( mm . rating ) as average_rating from movie_actor ma , movie mm , movie_genre mg , person p , genre g where mg . movie_id = mm . id and ma . movie_id = mm . id and g . id = mg . genre_id and p . id = ma . actor_id group by mg . genre_id , ma . actor_id having count ( * ) >= 3 and avg ( mm . rating ) >= all ( select avg ( m . rating ) from movie m , movie_genre mog , movie_actor moa where mog . genre_id = mg . genre_id and mog . movie_id = m . id and moa . movie_id = m . id group by moa . actor_id having count ( * ) >= 3 ) \u6700\u540e\uff1a\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u8fd0\u884c\u8fd9\u4e24\u79cd\u7b54\u6848\uff0c\u6bd4\u8f83\u4e00\u4e0b\u901f\u5ea6\u5dee\u5f02\uff0c\u4ee5\u53ca\u601d\u8003\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u6837\u7684\u901f\u5ea6\u5dee\u5f02\u3002","title":"Assignment-2 Answer"},{"location":"Answer/assignment-2/#assignment-2-answer","text":"Q1 \u67e5\u8be2\u4e0a\u6620\u65f6\u95f4 >= 2014\u5e74\u5e76\u4e14\u8bc4\u5206<=7.0\u7684\u7535\u5f71\uff0c \u8f93\u51fa:\u7535\u5f71\u6807\u9898\uff0c\u5bfc\u6f14\u59d3\u540d\uff0c\u8bc4\u5206( rating ) use movies ; select m . title , p . name , m . rating from movie m , person p where m . year >= 2014 and m . rating <= 7 . 0 and m . director = p . id count=348 Q2 \u67e5\u8be2\u8fd9\u6837\u7684\u5bfc\u6f14\u59d3\u540d\uff08\u5728 movie . director \u4e2d\u6709\u8bb0\u5f55\u7684\u5373\u5bfc\u6f14\uff09\uff0c\u8fd9\u4e9b\u5bfc\u6f14\u6ca1\u6709\u5728\u4efb\u4f55\u4e00\u90e8\u7535\u5f71\u4e2d\u62c5\u4efb\u6f14\u5458\u3002 \u8f93\u51fa\uff1a\u5bfc\u6f14\u59d3\u540d use movies ; select p . ` name ` from ` person ` as p where p . ` id ` in ( select ` director ` from ` movie ` ) and p . ` id ` not in ( select ` actor_id ` from ` movie_actor ` ); count=608 Q3 \u67e5\u8be2 Edward Norton \u6216\u8005 Aamir Khan \u53c2\u6f14\u8fc7\u7684\u6240\u6709\u7535\u5f71 \u8f93\u51fa: \u7535\u5f71\u6807\u9898,\u8be5\u7535\u5f71\u7684\u4e0a\u6620\u65f6\u95f4 use movies ; select m . title , m . year from movie m , movie_actor ma , person p where m . id = ma . movie_id and ( p . name = 'Edward Norton' or p . name = 'Aamir Khan' ) and p . id = ma . actor_id ; count=9 Q4 \u67e5\u8be2\u7c7b\u578b\u4e3a Action \u4e14 \u8bc4\u5206>8.0 \u7684\u7535\u5f71\uff0c\u5e76\u4e14\u8be5\u7535\u5f71\u7684\u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71>=2\u90e8 \u8f93\u51fa:\u7535\u5f71\u6807\u9898,\u5bfc\u6f14\u59d3\u540d,\u8bc4\u5206 use movies ; select m . title , m . rating , p . name from movie_genre mg , movie m , genre g , person p where m . id = mg . movie_id and g . id = mg . genre_id and g . name = 'Action' and m . rating > 8 . 0 and p . id = m . director and m . director in ( select director from movie group by director having count ( * ) >= 2 ) count=11 ps: \u60f3\u4e0d\u6e05\u695a\u7684\u65f6\u5019\uff0c\u5148\u5168\u90e8\u8fde\u63a5\u83b7\u5f97\u6240\u6709\u9700\u8981\u7684\u5b57\u6bb5 where m.id=mg.movie_id and g.id = mg.genre_id and g.name='Action' and p.id = m.director \uff0c \u7136\u540e\u8003\u8651\u7528\u805a\u5408\u6765\u83b7\u5f97 >= 2 \u7684\u95ee\u9898\u3002 Q5 \u67e5\u8be2\u7535\u5f71\uff0c\u8be5\u7535\u5f71\u81f3\u5c11\u5305\u542b Horror \uff0c Thriller \u8fd92\u79cd\u7c7b\u578b \u8f93\u51fa\uff1a\u7535\u5f71\u540d\u79f0\uff0c\u5bfc\u6f14\u540d\u79f0 select m . ` title ` , p . ` name ` from ` movie ` as m , ` person ` as p where m . ` director ` = p . ` id ` and exists ( select * from ` movie_genre ` as X1 , ` genre ` as X2 , ` movie_genre ` as Y1 , ` genre ` as Y2 where X1 . ` genre_id ` = X2 . ` id ` and X2 . ` name ` = 'Horror' and Y1 . ` genre_id ` = Y2 . ` id ` and Y2 . ` name ` = 'Thriller' and X1 . ` movie_id ` = Y1 . ` movie_id ` and X1 . ` movie_id ` = m . ` id ` ); count=44 \u7b54\u6848\u7684\u601d\u8def\u662f\u5bf9\u6574\u4e2a\u7535\u5f71\u6761\u76ee\u8fdb\u884c exist \u5224\u65ad\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7535\u5f71\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u7c7b\u578b\u7b26\u5408\u9898\u76ee\u6761\u4ef6\u3002 \u4e5f\u53ef\u4ee5\u7528\u4e24\u4e2a in \uff0c m.id \u5728 movie_genre \u4e2d\u6709\u5bf9\u5e94 Horror \u4e5f\u6709\u5bf9\u5e94\u7684 Thriller Q6 \u67e5\u8be2\u7535\u5f71\uff0c\u8be5\u7535\u5f71\u4ec5\u4ec5\u5305\u542b Horror \uff0c Thriller \u8fd92\u79cd\u7c7b\u578b \u8f93\u51fa\uff1a\u7535\u5f71\u540d\u79f0\uff0c\u5bfc\u6f14\u540d\u79f0 select m . ` title ` , p . ` name ` from ` movie ` as m , ` person ` as p where m . ` director ` = p . ` id ` and exists ( select * from ` movie_genre ` as X1 , ` genre ` as X2 , ` movie_genre ` as Y1 , ` genre ` as Y2 where X1 . ` genre_id ` = X2 . ` id ` and X2 . ` name ` = 'Horror' and Y1 . ` genre_id ` = Y2 . ` id ` and Y2 . ` name ` = 'Thriller' and X1 . ` movie_id ` = Y1 . ` movie_id ` and X1 . ` movie_id ` = m . ` id ` ) and not exists ( select * from ` movie_genre ` as X1 , ` genre ` as X2 , ` movie_genre ` as Y1 , ` genre ` as Y2 where X1 . ` genre_id ` = X2 . ` id ` and X2 . ` name ` != 'Horror' and X2 . ` name ` != 'Thriller' and Y1 . ` genre_id ` = Y2 . ` id ` and Y2 . ` name ` != 'Horror' and Y2 . ` name ` != 'Thriller' and X1 . ` movie_id ` = Y1 . ` movie_id ` and X1 . ` movie_id ` = m . ` id ` ); count=16 \u6709 Horror \u6216\u8005 Thriller , \u4f46\u4e0d\u540c\u65f6\u6709\u4e24\u4e2a \uff08\u770b\u7740\u957f\uff0c\u4f46\u662f\u4e5f\u5c31\u662f\u5199\u5f97\u957f\u4e86\u70b9\uff0c\u601d\u8def\u4e0d\u96be\uff09 Q7 \u67e5\u8be2\u57282014\u5e74\u4e4b\u524d\uff08\u5305\u62ec2014\uff09\uff0c\u6709\u8d85\u8fc73\u90e8\u7535\u5f71\u4e0a\u6620\u7684\u6f14\u5458\u4ee5\u53ca\u4ed6\u53c2\u6f14\u7684\u7535\u5f71\u540d \u8f93\u51fa: \u6f14\u5458\u540d\uff0c\u53c2\u6f14\u7684\u7535\u5f71\u540d\uff0c use movies ; select m . title , p . name from movie m , person p , movie_actor ma1 where m . id = ma1 . movie_id and p . id = ma1 . actor_id and m . year <= 2014 and ma1 . actor_id in ( select mg . actor_id from movie_actor mg , movie mm where mm . id = mg . movie_id and mm . year <= 2014 group by actor_id having count ( * ) > 3 ); count=848 \u6ce8\u610f\u70b9\uff1a\u8fd9\u9053\u9898\u5f88\u6709\u53ef\u80fd\u4f1a\u5728\u805a\u5408\u7684\u5730\u65b9\u4e0d\u589e\u52a02014\u5e74\u9650\u5236\uff0c\u4ece\u800c\u5bfc\u81f4\u7b54\u6848\u8d85\u8fc71000 Q8 \u67e5\u8be2\u6f14\u5458\uff0c\u8be5\u6f14\u5458\u53c2\u6f14\u4e86 Joss Whedon \u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71\u3002 \u8f93\u51fa\uff1a\u6f14\u5458\u59d3\u540d select p . ` name ` from ` person ` as p where p . ` id ` in ( select ` actor_id ` from ` movie_actor ` ) and not exists ( select * from ` person ` as pp , ` movie ` as mm where pp . ` name ` = 'Joss Whedon' and mm . ` director ` = pp . ` id ` and not exists ( select * from ` movie_actor ` as ma where mm . ` id ` = ma . ` movie_id ` and ma . ` actor_id ` = p . ` id ` ) ); count=2 Q9 \u67e5\u8be2\u8fd9\u6837\u7684\u6f14\u5458\u4e0e\u5bfc\u6f14\uff0c\u8fd9\u4e2a\u6f14\u5458\u53c2\u6f14\u4e86\u8be5\u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71\uff0c\u4e14\u8be5\u5bfc\u6f14\u5bfc\u6f14\u4e86\u81f3\u5c112\u90e8\u7535\u5f71\u3002 \u8f93\u51fa\uff1a \u6f14\u5458\u59d3\u540d\uff0c\u5bfc\u6f14\u59d3\u540d select p . ` name ` , d . ` name ` from ` person ` as p , ` person ` as d where p . ` id ` in ( select ` actor_id ` from ` movie_actor ` ) and d . ` id ` in ( select X . ` director ` from ` movie ` as X , ` movie ` as Y where X . ` director ` = Y . ` director ` and X . ` id ` != Y . ` id ` ) and not exists ( select * from ` movie ` as m where m . ` director ` = d . ` id ` and not exists ( select * from ` movie_actor ` as ma where m . ` id ` = ma . ` movie_id ` and ma . ` actor_id ` = p . ` id ` ) ); count=50 Q10 * Additional Question \u67e5\u8be2\u6bcf\u4e00\u79cd\u7c7b\u578b\u7535\u5f71\u5bf9\u5e94\u7684\u5f71\u5e1d/\u5f71\u540e\uff08\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u7c7b\u578b\uff0c\u8be5\u5f71\u5e1d/\u5f71\u540e\u81f3\u5c11\u6709\u4e09\u90e8\u7535\u5f71\u662f\u8fd9\u4e2a\u7c7b\u578b\uff0c\u5e76\u4e14\u5728\u6240\u6709\u81f3\u5c11\u53c2\u6f14\u4e863\u90e8\u8be5\u7c7b\u578b\u7535\u5f71\u7684\u6f14\u5458\u4e2d\uff0c\u83b7\u5f97\u7684\u5e73\u5747\u8bc4\u5206\u6700\u9ad8\uff09 \u8f93\u51fa\uff1a \u7c7b\u578b\uff0c\u6f14\u5458\u540d\uff0c\u5e73\u5747\u8bc4\u5206 \u8fd9\u9053\u9898\u6700\u7b80\u5355\u7684\u601d\u8def\u662f\uff1a \u5148\u628a\u6240\u6709\u7684\u8868\u8fde\u63a5\u8d77\u6765\uff08\u56e0\u4e3a\u6240\u9700\u7684\u5b57\u6bb5\u5206\u6563\u5728\u4e0d\u540c\u7684\u8868\u4e2d\uff09 \u5bf9 \uff08\u6f14\u5458\uff0c\u7c7b\u578b\uff09\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u505a \u805a\u5408\u5206\u7ec4 \uff0c\u5e76\u6309\u7167\u8fd9\u4e2a\u5206\u7ec4\u6c42\u51fa \u6bcf\u4e2a\u6f14\u5458\u5728\u6bcf\u4e2a\u7c7b\u578b\u4e0a\u7684\u6240\u6709\u7535\u5f71\u7684\u5e73\u5747\u5206\uff0c\u5e76\u5728\u805a\u5408\u4e2d\u589e\u52a0 count \u7b5b\u9009\u51fa\u8be5\u7c7b\u578b\u5bf9\u4e8e\u8be5\u6f14\u5458\u7535\u5f71\u6570\u5fc5\u987b>=3 \u7136\u540e\u5bf9\u7c7b\u578b\u5206\u7ec4\uff0c\u6c42\u51fa\u6700\u5927\u7684\u5e73\u5747\u5206 Ps: \u5f53\u6d89\u53ca\u5230\u5d4c\u5957\u5b50\u53e5\u6bd4\u8f83\u957f\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u7528 with \u6765\u4f18\u5316(\u5b9a\u4e49\u5b50\u53e5\u522b\u540d) with whole as ( select g . name as genre , p . name as actor , avg ( m . rating ) as avg_rating from genre g , movie m , movie_actor ma , movie_genre mg , person p where g . id = mg . genre_id and m . id = mg . movie_id and p . id = ma . actor_id and m . id = ma . movie_id group by genre , actor having count ( rating ) >= 3 ) \u8fd9\u4e2a whole \u5185\u90e8\u5b50\u53e5\u5b9e\u73b0\u7684\u5c31\u662f\u6b65\u9aa4\u7684\u524d\u4e24\u6b65\uff0c\u5f97\u5230\u4e86\uff08\u6f14\u5458\uff0c\u7c7b\u578b\uff09\u5bf9\u5e94\u7684\u5e73\u5747\u5f97\u5206 use movies ; with whole as ( select g . name as genre , p . name as actor , avg ( m . rating ) as avg_rating from genre g , movie m , movie_actor ma , movie_genre mg , person p where g . id = mg . genre_id and m . id = mg . movie_id and p . id = ma . actor_id and m . id = ma . movie_id group by genre , actor having count ( rating ) >= 3 ) select w . genre as genre , max ( w . avg_rating ) as max_rating from whole w group by genre \u5230\u4e86\u8fd9\u4e00\u6b65\u5c31\u6c42\u51fa\u4e86\u4e0a\u4e00\u6b65\u4e2d\uff0c\u6bcf\u4e2a\u7c7b\u578b\u5bf9\u5e94\u7684\u6700\u5927\u5e73\u5747\u5206 \u6700\u540e\u6c42\u51fa\u6700\u5927\u7684\u6761\u76ee use movies ; with whole as ( select g . name as genre , p . name as actor , avg ( m . rating ) as avg_rating from genre g , movie m , movie_actor ma , movie_genre mg , person p where g . id = mg . genre_id and m . id = mg . movie_id and p . id = ma . actor_id and m . id = ma . movie_id group by genre , actor having count ( rating ) >= 3 ), max_genre as ( select w . genre as genre , max ( w . avg_rating ) as max_rating from whole w group by genre ) select ww . actor as actor , ww . genre as genre , ww . avg_rating as rating from whole ww , max_genre as mg where ww . genre = mg . genre and ww . avg_rating >= mg . max_rating ; \u6ce8\u610f\uff0c\u4e00\u4e2a\u7c7b\u578b\u7684\u5f71\u5e1d/\u5f71\u540e\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\uff08\u5e73\u5747\u5206\u76f8\u540c\uff09 count=17 lujiayi\u540c\u5b66\u7684\u53e6\u4e00\u79cd\u5199\u6cd5\u66f4\u7b80\u6d01\u548c\u6613\u4e8e\u7406\u89e3 select g . name as genre , p . name , avg ( mm . rating ) as average_rating from movie_actor ma , movie mm , movie_genre mg , person p , genre g where mg . movie_id = mm . id and ma . movie_id = mm . id and g . id = mg . genre_id and p . id = ma . actor_id group by mg . genre_id , ma . actor_id having count ( * ) >= 3 and avg ( mm . rating ) >= all ( select avg ( m . rating ) from movie m , movie_genre mog , movie_actor moa where mog . genre_id = mg . genre_id and mog . movie_id = m . id and moa . movie_id = m . id group by moa . actor_id having count ( * ) >= 3 ) \u6700\u540e\uff1a\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u8fd0\u884c\u8fd9\u4e24\u79cd\u7b54\u6848\uff0c\u6bd4\u8f83\u4e00\u4e0b\u901f\u5ea6\u5dee\u5f02\uff0c\u4ee5\u53ca\u601d\u8003\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u6837\u7684\u901f\u5ea6\u5dee\u5f02\u3002","title":"Assignment-2 Answer"},{"location":"Assignment/assignment1/","text":"Assignment 1 Overview The first assignment is to set up a local database environment and be able to perform basic operations using the client. This task is an opportunity to: Learn how to launch the database service Get familiar with using a client to connect the database service and perform basic operations, which can be useful for you in the future. Release Date: March 05, 2021 / 15:25 Due Date: March 05, 2021 / 17:10 Quick Start Before setting up a local database in your own computer, you can try with computers in laboratory. In the desktop, you will see a folder named \"\u6570\u636e\u5e93\u5f15\u8bba\" Then double click the \"Mysql Workbench.exe\" inside to start the application. You will also see a txt file called \"mysql_password\" , which will be used when connecting. Once you establish connection successfully, you can try this simple task Specification Then you need to install both mysql-server and mysql-client in your own computer. Server Download Address You can come here for reference Hint Please choose the version that corresponds to your operating system Then click the No thanks, just start my download. If you have installed and configured the environment path, you can try the following commands to determine whether the installation is successful $ mysql -u root -p $ mysql> show databases; Client We recommend these two client tools Download address: Hint Please choose the version that corresponds to your operating system Navicat (It's not free) Mysql Workbench the default port will be 3306 Simple task After all the above steps are completed, you are required to do following create a new schema use command CREATE SCHEMA ` intro_db ` ; use client tool Create a new table use command CREATE TABLE ` intro_db ` . ` course ` ( ` id ` INT NOT NULL , ` name ` VARCHAR ( 45 ) NOT NULL , PRIMARY KEY ( ` id ` )); use client tool Insert a new data use command Insert into ` intro_db ` . ` course ` ( id , name ) values ( 2 , 'amy' ); use client tool","title":"Assignment-1"},{"location":"Assignment/assignment1/#assignment-1","text":"","title":"Assignment 1"},{"location":"Assignment/assignment1/#overview","text":"The first assignment is to set up a local database environment and be able to perform basic operations using the client. This task is an opportunity to: Learn how to launch the database service Get familiar with using a client to connect the database service and perform basic operations, which can be useful for you in the future. Release Date: March 05, 2021 / 15:25 Due Date: March 05, 2021 / 17:10","title":"Overview"},{"location":"Assignment/assignment1/#quick-start","text":"Before setting up a local database in your own computer, you can try with computers in laboratory. In the desktop, you will see a folder named \"\u6570\u636e\u5e93\u5f15\u8bba\" Then double click the \"Mysql Workbench.exe\" inside to start the application. You will also see a txt file called \"mysql_password\" , which will be used when connecting. Once you establish connection successfully, you can try this simple task","title":"Quick Start"},{"location":"Assignment/assignment1/#_1","text":"","title":""},{"location":"Assignment/assignment1/#specification","text":"Then you need to install both mysql-server and mysql-client in your own computer.","title":"Specification"},{"location":"Assignment/assignment1/#server","text":"Download Address You can come here for reference Hint Please choose the version that corresponds to your operating system Then click the No thanks, just start my download. If you have installed and configured the environment path, you can try the following commands to determine whether the installation is successful $ mysql -u root -p $ mysql> show databases;","title":"Server"},{"location":"Assignment/assignment1/#client","text":"We recommend these two client tools Download address: Hint Please choose the version that corresponds to your operating system Navicat (It's not free) Mysql Workbench the default port will be 3306","title":"Client"},{"location":"Assignment/assignment1/#simple-task","text":"After all the above steps are completed, you are required to do following create a new schema use command CREATE SCHEMA ` intro_db ` ; use client tool Create a new table use command CREATE TABLE ` intro_db ` . ` course ` ( ` id ` INT NOT NULL , ` name ` VARCHAR ( 45 ) NOT NULL , PRIMARY KEY ( ` id ` )); use client tool Insert a new data use command Insert into ` intro_db ` . ` course ` ( id , name ) values ( 2 , 'amy' ); use client tool","title":"Simple task"},{"location":"Assignment/assignment2/","text":"Assignment 2 Overview The second homework is to construct a set of SQL queries for data analysis. For this, we will provide some natural language level query questions that students will need to convert into sql statements. Students will also be required to run these sql queries and have them checked by the TAs in class . This task is an opportunity to: Learn basic and certain advanced SQL features Get familiar with using and applying sql in specific application scenarios Release Date: March 12, 2021 / 15:25 Due Date: March 12, 2021 / 17:10 Preliminary Download You need to download the DataSet we have prepared for you in the elearning . movies.sql Loading data Open Mysql Workbench , click the corresponding tab to import movies.sql downloaded in the previous step. Then click the run button (It looks like \u26a1\ufe0f), you'll see a series of success logs below. Finally, click the refresh button in the sidebar. A schema called movies has been loaded sucessfully. Simple tutorials Hint Before writing SQL statements, please carefully observe the column name and structure of each table. A clearer understanding of the overall architecture will help you quickly and accurately finish this work. Table Structure Genre Column Type Example Id Int 1 Name Varchar \"Action\" movie Column Type Example Id Int 1 Title Varchar \"(500) Days of Summer\" Description Varchar \"Desc\" Director Int (person's id) 123 Year Int 2014 Length Int 95 Rating Double 8.0 Votes Int 9830 Revenue Double 98982.3 Metascore Int 76 movie_actor A movie can correspond to multiple actors Column Type Example Id Int 1 movie_id Int 1 actor_id Int 2 movie_genre A movie can correspond to multiple genres Column Type Example Id Int 1 movie_id Int 1 genre_id Int 2 person Column Type Example Id Int 1 Name Varchar \"amy\" Examples E1 \u67e5\u8be2 Edward Norton \u53c2\u6f14\u7684\u6240\u6709\u7535\u5f71\u7684\u6807\u9898 use movies ; select m . title from movie m , movie_actor ma , person p where m . id = ma . movie_id and p . id = ma . actor_id and p . name = 'Edward Norton' ; E2: \u67e5\u8be2\u6267\u5bfc\u7535\u5f71\u8d85\u8fc73\u90e8\u7684\u5bfc\u6f14\u540d\u79f0 \u8f93\u51fa: \u5bfc\u6f14\u540d\uff0c\u7535\u5f71\u540d\u79f0 use movies ; select p . name , m . title from movie m , person p where m . director = p . id and m . director in ( select director from movie group by director having count ( * ) > 3 ); E3: \u67e5\u8be2\u524d\u5341\u4f4d\u7968\u623f\u62c5\u5f53\u6f14\u5458\uff0c\u5373\u8be5\u6f14\u5458\u53c2\u6f14\u7684\u6240\u6709\u7535\u5f71\u7684\u7d2f\u79ef\u7968\u623f\u6700\u9ad8 \u8f93\u51fa\uff1a\u6f14\u5458\u540d\u79f0\uff0c\u7d2f\u79ef\u7968\u623f use movies ; select mm . name , sum ( mm . revenue ) as sum_revenue from ( select p . name as name , m . revenue as revenue from person p , movie m , movie_actor ma where p . id = ma . actor_id and ma . movie_id = m . id ) as mm group by mm . name order by sum_revenue desc limit 10 ; Tasks Q1 \u67e5\u8be2\u4e0a\u6620\u65f6\u95f4 >= 2014\u5e74\u5e76\u4e14\u8bc4\u5206<=7.0\u7684\u7535\u5f71\uff0c \u8f93\u51fa:\u7535\u5f71\u6807\u9898\uff0c\u5bfc\u6f14\u59d3\u540d\uff0c\u8bc4\u5206( rating ) Q2 \u67e5\u8be2\u8fd9\u6837\u7684\u5bfc\u6f14\u59d3\u540d\uff08\u5728 movie . director \u4e2d\u6709\u8bb0\u5f55\u7684\u5373\u5bfc\u6f14\uff09\uff0c\u8fd9\u4e9b\u5bfc\u6f14\u6ca1\u6709\u5728\u4efb\u4f55\u4e00\u90e8\u7535\u5f71\u4e2d\u62c5\u4efb\u6f14\u5458\u3002 \u8f93\u51fa\uff1a\u5bfc\u6f14\u59d3\u540d Q3 \u67e5\u8be2 Edward Norton \u6216\u8005 Aamir Khan \u53c2\u6f14\u8fc7\u7684\u6240\u6709\u7535\u5f71 \u8f93\u51fa: \u7535\u5f71\u6807\u9898,\u8be5\u7535\u5f71\u7684\u4e0a\u6620\u65f6\u95f4 Q4 \u67e5\u8be2\u7c7b\u578b\u4e3a Action \u4e14 \u8bc4\u5206>8.0 \u7684\u7535\u5f71\uff0c\u5e76\u4e14\u8be5\u7535\u5f71\u7684\u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71>=2\u90e8 \u8f93\u51fa:\u7535\u5f71\u6807\u9898,\u5bfc\u6f14\u59d3\u540d,\u8bc4\u5206 Q5 \u67e5\u8be2\u7535\u5f71\uff0c\u8be5\u7535\u5f71\u81f3\u5c11\u5305\u542b Horror \uff0c Thriller \u8fd92\u79cd\u7c7b\u578b \u8f93\u51fa\uff1a\u7535\u5f71\u540d\u79f0\uff0c\u5bfc\u6f14\u540d\u79f0 Q6 \u67e5\u8be2\u7535\u5f71\uff0c\u8be5\u7535\u5f71\u4ec5\u4ec5\u5305\u542b Horror \uff0c Thriller \u8fd92\u79cd\u7c7b\u578b \u8f93\u51fa\uff1a\u7535\u5f71\u540d\u79f0\uff0c\u5bfc\u6f14\u540d\u79f0 Q7 \u67e5\u8be2\u57282014\u5e74\u4e4b\u524d\uff08\u5305\u62ec2014\uff09\uff0c\u6709\u8d85\u8fc73\u90e8\u7535\u5f71\u4e0a\u6620\u7684\u6f14\u5458\u4ee5\u53ca\u4ed6\u53c2\u6f14\u7684\u7535\u5f71\u540d \u8f93\u51fa: \u6f14\u5458\u540d\uff0c\u53c2\u6f14\u7684\u7535\u5f71\u540d\uff0c Q8 \u67e5\u8be2\u6f14\u5458\uff0c\u8be5\u6f14\u5458\u53c2\u6f14\u4e86 Joss Whedon \u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71\u3002 \u8f93\u51fa\uff1a\u6f14\u5458\u59d3\u540d Q9 \u67e5\u8be2\u8fd9\u6837\u7684\u6f14\u5458\u4e0e\u5bfc\u6f14\uff0c\u8fd9\u4e2a\u6f14\u5458\u53c2\u6f14\u4e86\u8be5\u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71\uff0c\u4e14\u8be5\u5bfc\u6f14\u5bfc\u6f14\u4e86\u81f3\u5c112\u90e8\u7535\u5f71\u3002 \u8f93\u51fa\uff1a \u6f14\u5458\u59d3\u540d\uff0c\u5bfc\u6f14\u59d3\u540d Q10 * Additional Question \u67e5\u8be2\u6bcf\u4e00\u79cd\u7c7b\u578b\u7535\u5f71\u5bf9\u5e94\u7684\u5f71\u5e1d/\u5f71\u540e\uff08\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u7c7b\u578b\uff0c\u8be5\u5f71\u5e1d/\u5f71\u540e\u81f3\u5c11\u6709\u4e09\u90e8\u7535\u5f71\u662f\u8fd9\u4e2a\u7c7b\u578b\uff0c\u5e76\u4e14\u5728\u6240\u6709\u81f3\u5c11\u53c2\u6f14\u4e863\u90e8\u8be5\u7c7b\u578b\u7535\u5f71\u7684\u6f14\u5458\u4e2d\uff0c\u83b7\u5f97\u7684\u5e73\u5747\u8bc4\u5206\u6700\u9ad8\uff09 \u8f93\u51fa\uff1a \u7c7b\u578b\uff0c\u6f14\u5458\u540d\uff0c\u5e73\u5747\u8bc4\u5206","title":"Assignment-2"},{"location":"Assignment/assignment2/#assignment-2","text":"","title":"Assignment 2"},{"location":"Assignment/assignment2/#overview","text":"The second homework is to construct a set of SQL queries for data analysis. For this, we will provide some natural language level query questions that students will need to convert into sql statements. Students will also be required to run these sql queries and have them checked by the TAs in class . This task is an opportunity to: Learn basic and certain advanced SQL features Get familiar with using and applying sql in specific application scenarios Release Date: March 12, 2021 / 15:25 Due Date: March 12, 2021 / 17:10","title":"Overview"},{"location":"Assignment/assignment2/#preliminary","text":"","title":"Preliminary"},{"location":"Assignment/assignment2/#download","text":"You need to download the DataSet we have prepared for you in the elearning . movies.sql","title":"Download"},{"location":"Assignment/assignment2/#loading-data","text":"Open Mysql Workbench , click the corresponding tab to import movies.sql downloaded in the previous step. Then click the run button (It looks like \u26a1\ufe0f), you'll see a series of success logs below. Finally, click the refresh button in the sidebar. A schema called movies has been loaded sucessfully.","title":"Loading data"},{"location":"Assignment/assignment2/#simple-tutorials","text":"Hint Before writing SQL statements, please carefully observe the column name and structure of each table. A clearer understanding of the overall architecture will help you quickly and accurately finish this work.","title":"Simple tutorials"},{"location":"Assignment/assignment2/#table-structure","text":"Genre Column Type Example Id Int 1 Name Varchar \"Action\" movie Column Type Example Id Int 1 Title Varchar \"(500) Days of Summer\" Description Varchar \"Desc\" Director Int (person's id) 123 Year Int 2014 Length Int 95 Rating Double 8.0 Votes Int 9830 Revenue Double 98982.3 Metascore Int 76 movie_actor A movie can correspond to multiple actors Column Type Example Id Int 1 movie_id Int 1 actor_id Int 2 movie_genre A movie can correspond to multiple genres Column Type Example Id Int 1 movie_id Int 1 genre_id Int 2 person Column Type Example Id Int 1 Name Varchar \"amy\"","title":"Table Structure"},{"location":"Assignment/assignment2/#examples","text":"E1 \u67e5\u8be2 Edward Norton \u53c2\u6f14\u7684\u6240\u6709\u7535\u5f71\u7684\u6807\u9898 use movies ; select m . title from movie m , movie_actor ma , person p where m . id = ma . movie_id and p . id = ma . actor_id and p . name = 'Edward Norton' ; E2: \u67e5\u8be2\u6267\u5bfc\u7535\u5f71\u8d85\u8fc73\u90e8\u7684\u5bfc\u6f14\u540d\u79f0 \u8f93\u51fa: \u5bfc\u6f14\u540d\uff0c\u7535\u5f71\u540d\u79f0 use movies ; select p . name , m . title from movie m , person p where m . director = p . id and m . director in ( select director from movie group by director having count ( * ) > 3 ); E3: \u67e5\u8be2\u524d\u5341\u4f4d\u7968\u623f\u62c5\u5f53\u6f14\u5458\uff0c\u5373\u8be5\u6f14\u5458\u53c2\u6f14\u7684\u6240\u6709\u7535\u5f71\u7684\u7d2f\u79ef\u7968\u623f\u6700\u9ad8 \u8f93\u51fa\uff1a\u6f14\u5458\u540d\u79f0\uff0c\u7d2f\u79ef\u7968\u623f use movies ; select mm . name , sum ( mm . revenue ) as sum_revenue from ( select p . name as name , m . revenue as revenue from person p , movie m , movie_actor ma where p . id = ma . actor_id and ma . movie_id = m . id ) as mm group by mm . name order by sum_revenue desc limit 10 ;","title":"Examples"},{"location":"Assignment/assignment2/#tasks","text":"Q1 \u67e5\u8be2\u4e0a\u6620\u65f6\u95f4 >= 2014\u5e74\u5e76\u4e14\u8bc4\u5206<=7.0\u7684\u7535\u5f71\uff0c \u8f93\u51fa:\u7535\u5f71\u6807\u9898\uff0c\u5bfc\u6f14\u59d3\u540d\uff0c\u8bc4\u5206( rating ) Q2 \u67e5\u8be2\u8fd9\u6837\u7684\u5bfc\u6f14\u59d3\u540d\uff08\u5728 movie . director \u4e2d\u6709\u8bb0\u5f55\u7684\u5373\u5bfc\u6f14\uff09\uff0c\u8fd9\u4e9b\u5bfc\u6f14\u6ca1\u6709\u5728\u4efb\u4f55\u4e00\u90e8\u7535\u5f71\u4e2d\u62c5\u4efb\u6f14\u5458\u3002 \u8f93\u51fa\uff1a\u5bfc\u6f14\u59d3\u540d Q3 \u67e5\u8be2 Edward Norton \u6216\u8005 Aamir Khan \u53c2\u6f14\u8fc7\u7684\u6240\u6709\u7535\u5f71 \u8f93\u51fa: \u7535\u5f71\u6807\u9898,\u8be5\u7535\u5f71\u7684\u4e0a\u6620\u65f6\u95f4 Q4 \u67e5\u8be2\u7c7b\u578b\u4e3a Action \u4e14 \u8bc4\u5206>8.0 \u7684\u7535\u5f71\uff0c\u5e76\u4e14\u8be5\u7535\u5f71\u7684\u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71>=2\u90e8 \u8f93\u51fa:\u7535\u5f71\u6807\u9898,\u5bfc\u6f14\u59d3\u540d,\u8bc4\u5206 Q5 \u67e5\u8be2\u7535\u5f71\uff0c\u8be5\u7535\u5f71\u81f3\u5c11\u5305\u542b Horror \uff0c Thriller \u8fd92\u79cd\u7c7b\u578b \u8f93\u51fa\uff1a\u7535\u5f71\u540d\u79f0\uff0c\u5bfc\u6f14\u540d\u79f0 Q6 \u67e5\u8be2\u7535\u5f71\uff0c\u8be5\u7535\u5f71\u4ec5\u4ec5\u5305\u542b Horror \uff0c Thriller \u8fd92\u79cd\u7c7b\u578b \u8f93\u51fa\uff1a\u7535\u5f71\u540d\u79f0\uff0c\u5bfc\u6f14\u540d\u79f0 Q7 \u67e5\u8be2\u57282014\u5e74\u4e4b\u524d\uff08\u5305\u62ec2014\uff09\uff0c\u6709\u8d85\u8fc73\u90e8\u7535\u5f71\u4e0a\u6620\u7684\u6f14\u5458\u4ee5\u53ca\u4ed6\u53c2\u6f14\u7684\u7535\u5f71\u540d \u8f93\u51fa: \u6f14\u5458\u540d\uff0c\u53c2\u6f14\u7684\u7535\u5f71\u540d\uff0c Q8 \u67e5\u8be2\u6f14\u5458\uff0c\u8be5\u6f14\u5458\u53c2\u6f14\u4e86 Joss Whedon \u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71\u3002 \u8f93\u51fa\uff1a\u6f14\u5458\u59d3\u540d Q9 \u67e5\u8be2\u8fd9\u6837\u7684\u6f14\u5458\u4e0e\u5bfc\u6f14\uff0c\u8fd9\u4e2a\u6f14\u5458\u53c2\u6f14\u4e86\u8be5\u5bfc\u6f14\u6267\u5bfc\u7684\u6240\u6709\u7535\u5f71\uff0c\u4e14\u8be5\u5bfc\u6f14\u5bfc\u6f14\u4e86\u81f3\u5c112\u90e8\u7535\u5f71\u3002 \u8f93\u51fa\uff1a \u6f14\u5458\u59d3\u540d\uff0c\u5bfc\u6f14\u59d3\u540d Q10 * Additional Question \u67e5\u8be2\u6bcf\u4e00\u79cd\u7c7b\u578b\u7535\u5f71\u5bf9\u5e94\u7684\u5f71\u5e1d/\u5f71\u540e\uff08\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u7c7b\u578b\uff0c\u8be5\u5f71\u5e1d/\u5f71\u540e\u81f3\u5c11\u6709\u4e09\u90e8\u7535\u5f71\u662f\u8fd9\u4e2a\u7c7b\u578b\uff0c\u5e76\u4e14\u5728\u6240\u6709\u81f3\u5c11\u53c2\u6f14\u4e863\u90e8\u8be5\u7c7b\u578b\u7535\u5f71\u7684\u6f14\u5458\u4e2d\uff0c\u83b7\u5f97\u7684\u5e73\u5747\u8bc4\u5206\u6700\u9ad8\uff09 \u8f93\u51fa\uff1a \u7c7b\u578b\uff0c\u6f14\u5458\u540d\uff0c\u5e73\u5747\u8bc4\u5206","title":"Tasks"},{"location":"Project/project-1/","text":"Project-1","title":"Project-1"},{"location":"Project/project-1/#project-1","text":"","title":"Project-1"},{"location":"Project/project-2/","text":"Project-2","title":"Project-2"},{"location":"Project/project-2/#project-2","text":"","title":"Project-2"}]}